diff --git a/node_modules/async-validator/dist-node/index.js b/node_modules/async-validator/dist-node/index.js
index d6f2fd0..c28b6df 100644
--- a/node_modules/async-validator/dist-node/index.js
+++ b/node_modules/async-validator/dist-node/index.js
@@ -2,7 +2,7 @@
 
 Object.defineProperty(exports, '__esModule', { value: true });
 
-function _extends() {
+function _extends () {
   _extends = Object.assign || function (target) {
     for (var i = 1; i < arguments.length; i++) {
       var source = arguments[i];
@@ -22,10 +22,10 @@ function _extends() {
 
 /* eslint no-console:0 */
 var formatRegExp = /%[sdj%]/g;
-var warning = function warning() {}; // don't print warning message when in production env or node runtime
+var warning = function warning () { }; // don't print warning message when in production env or node runtime
 
 if (typeof process !== 'undefined' && process.env && process.env.NODE_ENV !== 'production' && typeof window !== 'undefined' && typeof document !== 'undefined') {
-  warning = function warning(type, errors) {
+  warning = function warning (type, errors) {
     if (typeof console !== 'undefined' && console.warn) {
       if (errors.every(function (e) {
         return typeof e === 'string';
@@ -36,7 +36,7 @@ if (typeof process !== 'undefined' && process.env && process.env.NODE_ENV !== 'p
   };
 }
 
-function convertFieldsError(errors) {
+function convertFieldsError (errors) {
   if (!errors || !errors.length) return null;
   var fields = {};
   errors.forEach(function (error) {
@@ -46,7 +46,7 @@ function convertFieldsError(errors) {
   });
   return fields;
 }
-function format() {
+function format () {
   for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
     args[_key] = arguments[_key];
   }
@@ -65,6 +65,11 @@ function format() {
         return '%';
       }
 
+      if (x === '%!') {
+        i++
+        return '';
+      }
+
       if (i >= len) {
         return x;
       }
@@ -100,11 +105,11 @@ function format() {
   return f;
 }
 
-function isNativeStringType(type) {
+function isNativeStringType (type) {
   return type === 'string' || type === 'url' || type === 'hex' || type === 'email' || type === 'pattern';
 }
 
-function isEmptyValue(value, type) {
+function isEmptyValue (value, type) {
   if (value === undefined || value === null) {
     return true;
   }
@@ -120,12 +125,12 @@ function isEmptyValue(value, type) {
   return false;
 }
 
-function asyncParallelArray(arr, func, callback) {
+function asyncParallelArray (arr, func, callback) {
   var results = [];
   var total = 0;
   var arrLength = arr.length;
 
-  function count(errors) {
+  function count (errors) {
     results.push.apply(results, errors);
     total++;
 
@@ -139,11 +144,11 @@ function asyncParallelArray(arr, func, callback) {
   });
 }
 
-function asyncSerialArray(arr, func, callback) {
+function asyncSerialArray (arr, func, callback) {
   var index = 0;
   var arrLength = arr.length;
 
-  function next(errors) {
+  function next (errors) {
     if (errors && errors.length) {
       callback(errors);
       return;
@@ -162,7 +167,7 @@ function asyncSerialArray(arr, func, callback) {
   next([]);
 }
 
-function flattenObjArr(objArr) {
+function flattenObjArr (objArr) {
   var ret = [];
   Object.keys(objArr).forEach(function (k) {
     ret.push.apply(ret, objArr[k]);
@@ -170,10 +175,10 @@ function flattenObjArr(objArr) {
   return ret;
 }
 
-function asyncMap(objArr, option, func, callback) {
+function asyncMap (objArr, option, func, callback) {
   if (option.first) {
     var _pending = new Promise(function (resolve, reject) {
-      var next = function next(errors) {
+      var next = function next (errors) {
         callback(errors);
         return errors.length ? reject({
           errors: errors,
@@ -203,7 +208,7 @@ function asyncMap(objArr, option, func, callback) {
   var total = 0;
   var results = [];
   var pending = new Promise(function (resolve, reject) {
-    var next = function next(errors) {
+    var next = function next (errors) {
       results.push.apply(results, errors);
       total++;
 
@@ -236,7 +241,7 @@ function asyncMap(objArr, option, func, callback) {
   });
   return pending;
 }
-function complementError(rule) {
+function complementError (rule) {
   return function (oe) {
     if (oe && oe.message) {
       oe.field = oe.field || rule.fullField;
@@ -249,7 +254,7 @@ function complementError(rule) {
     };
   };
 }
-function deepMerge(target, source) {
+function deepMerge (target, source) {
   if (source) {
     for (var s in source) {
       if (source.hasOwnProperty(s)) {
@@ -279,7 +284,7 @@ function deepMerge(target, source) {
  *  @param options.messages The validation messages.
  */
 
-function required(rule, value, source, errors, options, type) {
+function required (rule, value, source, errors, options, type) {
   if (rule.required && (!source.hasOwnProperty(rule.field) || isEmptyValue(value, type || rule.type))) {
     errors.push(format(options.messages.required, rule.fullField));
   }
@@ -297,7 +302,7 @@ function required(rule, value, source, errors, options, type) {
  *  @param options.messages The validation messages.
  */
 
-function whitespace(rule, value, source, errors, options) {
+function whitespace (rule, value, source, errors, options) {
   if (/^\s+$/.test(value) || value === '') {
     errors.push(format(options.messages.whitespace, rule.fullField));
   }
@@ -312,16 +317,16 @@ var pattern = {
   hex: /^#?([a-f0-9]{6}|[a-f0-9]{3})$/i
 };
 var types = {
-  integer: function integer(value) {
+  integer: function integer (value) {
     return types.number(value) && parseInt(value, 10) === value;
   },
-  "float": function float(value) {
+  "float": function float (value) {
     return types.number(value) && !types.integer(value);
   },
-  array: function array(value) {
+  array: function array (value) {
     return Array.isArray(value);
   },
-  regexp: function regexp(value) {
+  regexp: function regexp (value) {
     if (value instanceof RegExp) {
       return true;
     }
@@ -332,29 +337,29 @@ var types = {
       return false;
     }
   },
-  date: function date(value) {
+  date: function date (value) {
     return typeof value.getTime === 'function' && typeof value.getMonth === 'function' && typeof value.getYear === 'function';
   },
-  number: function number(value) {
+  number: function number (value) {
     if (isNaN(value)) {
       return false;
     }
 
     return typeof value === 'number';
   },
-  object: function object(value) {
+  object: function object (value) {
     return typeof value === 'object' && !types.array(value);
   },
-  method: function method(value) {
+  method: function method (value) {
     return typeof value === 'function';
   },
-  email: function email(value) {
+  email: function email (value) {
     return typeof value === 'string' && !!value.match(pattern.email) && value.length < 255;
   },
-  url: function url(value) {
+  url: function url (value) {
     return typeof value === 'string' && !!value.match(pattern.url);
   },
-  hex: function hex(value) {
+  hex: function hex (value) {
     return typeof value === 'string' && !!value.match(pattern.hex);
   }
 };
@@ -370,7 +375,7 @@ var types = {
  *  @param options.messages The validation messages.
  */
 
-function type(rule, value, source, errors, options) {
+function type (rule, value, source, errors, options) {
   if (rule.required && value === undefined) {
     required(rule, value, source, errors, options);
     return;
@@ -401,7 +406,7 @@ function type(rule, value, source, errors, options) {
  *  @param options.messages The validation messages.
  */
 
-function range(rule, value, source, errors, options) {
+function range (rule, value, source, errors, options) {
   var len = typeof rule.len === 'number';
   var min = typeof rule.min === 'number';
   var max = typeof rule.max === 'number'; // 正则匹配码点范围从U+010000一直到U+10FFFF的文字（补充平面Supplementary Plane）
@@ -463,11 +468,11 @@ var ENUM = 'enum';
  *  @param options.messages The validation messages.
  */
 
-function enumerable(rule, value, source, errors, options) {
+function enumerable (rule, value, source, errors, options) {
   rule[ENUM] = Array.isArray(rule[ENUM]) ? rule[ENUM] : [];
 
   if (rule[ENUM].indexOf(value) === -1) {
-    errors.push(format(options.messages[ENUM], rule.fullField, rule[ENUM].join(', ')));
+    errors.push(format(options.messages[ENUM], rule.fullField, rule[ENUM].join('/')));
   }
 }
 
@@ -483,7 +488,7 @@ function enumerable(rule, value, source, errors, options) {
  *  @param options.messages The validation messages.
  */
 
-function pattern$1(rule, value, source, errors, options) {
+function pattern$1 (rule, value, source, errors, options) {
   if (rule.pattern) {
     if (rule.pattern instanceof RegExp) {
       // if a RegExp instance is passed, reset `lastIndex` in case its `global`
@@ -524,7 +529,7 @@ var rules = {
  *  @param options.messages The validation messages.
  */
 
-function string(rule, value, callback, source, options) {
+function string (rule, value, callback, source, options) {
   var errors = [];
   var validate = rule.required || !rule.required && source.hasOwnProperty(rule.field);
 
@@ -560,7 +565,7 @@ function string(rule, value, callback, source, options) {
  *  @param options.messages The validation messages.
  */
 
-function method(rule, value, callback, source, options) {
+function method (rule, value, callback, source, options) {
   var errors = [];
   var validate = rule.required || !rule.required && source.hasOwnProperty(rule.field);
 
@@ -590,7 +595,7 @@ function method(rule, value, callback, source, options) {
  *  @param options.messages The validation messages.
  */
 
-function number(rule, value, callback, source, options) {
+function number (rule, value, callback, source, options) {
   var errors = [];
   var validate = rule.required || !rule.required && source.hasOwnProperty(rule.field);
 
@@ -625,7 +630,7 @@ function number(rule, value, callback, source, options) {
  *  @param options.messages The validation messages.
  */
 
-function _boolean(rule, value, callback, source, options) {
+function _boolean (rule, value, callback, source, options) {
   var errors = [];
   var validate = rule.required || !rule.required && source.hasOwnProperty(rule.field);
 
@@ -655,7 +660,7 @@ function _boolean(rule, value, callback, source, options) {
  *  @param options.messages The validation messages.
  */
 
-function regexp(rule, value, callback, source, options) {
+function regexp (rule, value, callback, source, options) {
   var errors = [];
   var validate = rule.required || !rule.required && source.hasOwnProperty(rule.field);
 
@@ -685,7 +690,7 @@ function regexp(rule, value, callback, source, options) {
  *  @param options.messages The validation messages.
  */
 
-function integer(rule, value, callback, source, options) {
+function integer (rule, value, callback, source, options) {
   var errors = [];
   var validate = rule.required || !rule.required && source.hasOwnProperty(rule.field);
 
@@ -716,7 +721,7 @@ function integer(rule, value, callback, source, options) {
  *  @param options.messages The validation messages.
  */
 
-function floatFn(rule, value, callback, source, options) {
+function floatFn (rule, value, callback, source, options) {
   var errors = [];
   var validate = rule.required || !rule.required && source.hasOwnProperty(rule.field);
 
@@ -747,7 +752,7 @@ function floatFn(rule, value, callback, source, options) {
  *  @param options.messages The validation messages.
  */
 
-function array(rule, value, callback, source, options) {
+function array (rule, value, callback, source, options) {
   var errors = [];
   var validate = rule.required || !rule.required && source.hasOwnProperty(rule.field);
 
@@ -778,7 +783,7 @@ function array(rule, value, callback, source, options) {
  *  @param options.messages The validation messages.
  */
 
-function object(rule, value, callback, source, options) {
+function object (rule, value, callback, source, options) {
   var errors = [];
   var validate = rule.required || !rule.required && source.hasOwnProperty(rule.field);
 
@@ -809,7 +814,7 @@ var ENUM$1 = 'enum';
  *  @param options.messages The validation messages.
  */
 
-function enumerable$1(rule, value, callback, source, options) {
+function enumerable$1 (rule, value, callback, source, options) {
   var errors = [];
   var validate = rule.required || !rule.required && source.hasOwnProperty(rule.field);
 
@@ -842,7 +847,7 @@ function enumerable$1(rule, value, callback, source, options) {
  *  @param options.messages The validation messages.
  */
 
-function pattern$2(rule, value, callback, source, options) {
+function pattern$2 (rule, value, callback, source, options) {
   var errors = [];
   var validate = rule.required || !rule.required && source.hasOwnProperty(rule.field);
 
@@ -861,7 +866,7 @@ function pattern$2(rule, value, callback, source, options) {
   callback(errors);
 }
 
-function date(rule, value, callback, source, options) {
+function date (rule, value, callback, source, options) {
   // console.log('integer rule called %j', rule);
   var errors = [];
   var validate = rule.required || !rule.required && source.hasOwnProperty(rule.field); // console.log('validate on %s value', value);
@@ -893,14 +898,14 @@ function date(rule, value, callback, source, options) {
   callback(errors);
 }
 
-function required$1(rule, value, callback, source, options) {
+function required$1 (rule, value, callback, source, options) {
   var errors = [];
   var type = Array.isArray(value) ? 'array' : typeof value;
   rules.required(rule, value, source, errors, options, type);
   callback(errors);
 }
 
-function type$1(rule, value, callback, source, options) {
+function type$1 (rule, value, callback, source, options) {
   var ruleType = rule.type;
   var errors = [];
   var validate = rule.required || !rule.required && source.hasOwnProperty(rule.field);
@@ -931,7 +936,7 @@ function type$1(rule, value, callback, source, options) {
  *  @param options.messages The validation messages.
  */
 
-function any(rule, value, callback, source, options) {
+function any (rule, value, callback, source, options) {
   var errors = [];
   var validate = rule.required || !rule.required && source.hasOwnProperty(rule.field);
 
@@ -966,7 +971,7 @@ var validators = {
   any: any
 };
 
-function newMessages() {
+function newMessages () {
   return {
     "default": 'Validation error on field %s',
     required: '%s is required',
@@ -1013,7 +1018,7 @@ function newMessages() {
     pattern: {
       mismatch: '%s value %s does not match pattern %s'
     },
-    clone: function clone() {
+    clone: function clone () {
       var cloned = JSON.parse(JSON.stringify(this));
       cloned.clone = this.clone;
       return cloned;
@@ -1029,21 +1034,21 @@ var messages = newMessages();
  *  for this schema.
  */
 
-function Schema(descriptor) {
+function Schema (descriptor) {
   this.rules = null;
   this._messages = messages;
   this.define(descriptor);
 }
 
 Schema.prototype = {
-  messages: function messages(_messages) {
+  messages: function messages (_messages) {
     if (_messages) {
       this._messages = deepMerge(newMessages(), _messages);
     }
 
     return this._messages;
   },
-  define: function define(rules) {
+  define: function define (rules) {
     if (!rules) {
       throw new Error('Cannot configure a schema with no rules');
     }
@@ -1063,7 +1068,7 @@ Schema.prototype = {
       }
     }
   },
-  validate: function validate(source_, o, oc) {
+  validate: function validate (source_, o, oc) {
     var _this = this;
 
     if (o === void 0) {
@@ -1071,7 +1076,7 @@ Schema.prototype = {
     }
 
     if (oc === void 0) {
-      oc = function oc() {};
+      oc = function oc () { };
     }
 
     var source = source_;
@@ -1091,12 +1096,12 @@ Schema.prototype = {
       return Promise.resolve();
     }
 
-    function complete(results) {
+    function complete (results) {
       var i;
       var errors = [];
       var fields = {};
 
-      function add(e) {
+      function add (e) {
         if (Array.isArray(e)) {
           var _errors;
 
@@ -1184,13 +1189,13 @@ Schema.prototype = {
       deep = deep && (rule.required || !rule.required && data.value);
       rule.field = data.field;
 
-      function addFullfield(key, schema) {
+      function addFullfield (key, schema) {
         return _extends({}, schema, {
           fullField: rule.fullField + "." + key
         });
       }
 
-      function cb(e) {
+      function cb (e) {
         if (e === void 0) {
           e = [];
         }
@@ -1306,7 +1311,7 @@ Schema.prototype = {
       complete(results);
     });
   },
-  getType: function getType(rule) {
+  getType: function getType (rule) {
     if (rule.type === undefined && rule.pattern instanceof RegExp) {
       rule.type = 'pattern';
     }
@@ -1317,7 +1322,7 @@ Schema.prototype = {
 
     return rule.type || 'string';
   },
-  getValidationMethod: function getValidationMethod(rule) {
+  getValidationMethod: function getValidationMethod (rule) {
     if (typeof rule.validator === 'function') {
       return rule.validator;
     }
@@ -1337,7 +1342,7 @@ Schema.prototype = {
   }
 };
 
-Schema.register = function register(type, validator) {
+Schema.register = function register (type, validator) {
   if (typeof validator !== 'function') {
     throw new Error('Cannot register a validator by type, validator is not a function');
   }
diff --git a/node_modules/async-validator/dist-web/index.js b/node_modules/async-validator/dist-web/index.js
index f0f0f9b..d67cd31 100644
--- a/node_modules/async-validator/dist-web/index.js
+++ b/node_modules/async-validator/dist-web/index.js
@@ -17,7 +17,7 @@ function _extends() {
 }
 
 /* eslint no-console:0 */
-var formatRegExp = /%[sdj%]/g;
+var formatRegExp = /%[sdj!%]/g;
 var warning = function warning() {}; // don't print warning message when in production env or node runtime
 
 if (typeof process !== 'undefined' && process.env && process.env.NODE_ENV !== 'production' && typeof window !== 'undefined' && typeof document !== 'undefined') {
@@ -61,6 +61,11 @@ function format() {
         return '%';
       }
 
+      if (x === '%!') {
+        i++
+        return '';
+      }
+
       if (i >= len) {
         return x;
       }
@@ -463,7 +468,7 @@ function enumerable(rule, value, source, errors, options) {
   rule[ENUM] = Array.isArray(rule[ENUM]) ? rule[ENUM] : [];
 
   if (rule[ENUM].indexOf(value) === -1) {
-    errors.push(format(options.messages[ENUM], rule.fullField, rule[ENUM].join(', ')));
+    errors.push(format(options.messages[ENUM], rule.fullField, rule[ENUM].join('/')));
   }
 }
 
